# var
snippet =
	= ${1:value};
# Function as var
snippet =f
	= function(${2}) {
		${3}
	};
# Function
snippet fun
	function ${1:function_name}(${2}) {
		${3}
	}
# Anonymous Function
snippet f
	function(${1}){${2}}
# if
snippet if
	if (${1}) {
		${2}
	}
# if ... else
snippet ife
	if (${1}) {
		${2}
	} else {
		${3}
	}
snippet else
	else {
		${1}
	}
# ternary operator
snippet ter
	${1:condition} ? ${2:if true} : ${3:if false};
# switch
snippet switch
	switch(${1:expression}) {
		case ${3} :
			${4}
			break;
		default:
			${2}
	}
# case
snippet case
	case ${1} :
		${2}
		break;
# for (...) {...} (Cached length)
snippet for
	for (var i = 0, len = ${1:things}.length; i < len; i++) {
		${2}
	}
# for (...) {...}
snippet forc Classic
	for (var ${2:i} = 0; $2 < ${1:things}.length; $2${3:++}) {
		${4}
	}
# for (...) {...} (Improved Native For-Loop)
snippet fori Improved Native For-Loop
	for (var ${2:i} = ${1:things}.length - 1; $2 >= 0; $2${3:--}) {
		${4}
	}
# forin
snippet forin
	for (${1:needle} in ${2:haystack}) {
		${3}
	}
# while (...) {...}
snippet while
	while (${1}) {
		${2}
	}
# do...while
snippet do
	do {
		${2}
	} while (${1});
# setTimeout function
snippet time setTimeout
	window.setTimeout(function() {${2}}, ${1:100});
# setTimeout function
snippet time setInterval
	window.setInterval(function() {${2}}, ${1:100});
# Get Elements
snippet gett
	getElementsByTagName('${1}')${2}
# Get Element
snippet geti
	getElementById('${1}')${2}
#
#
#
##########
# EVENTS #
##########
# Add Events
snippet events
	if (typeof(document.addEventListener) !== 'undefined') {
		${1:element}.addEventListener('${2:event_name}', ${3:handler_name}, false);
	} else if (typeof(document.attachEvent) !== 'undefined') {
		$1.attachEvent('on' + '$2', $3);
	} else {
		$1.['on' + $2] = $3;
	}${4}
# Add Event
snippet adde
	addEventListener('${1:event_name}', ${2:function_name}, false);${3}
# Attach Event
snippet atte
	attachEvent('on' + '${1:event_name}', ${2:function_name});${3}
# Event handler
snippet handler
	function ${1:function_name}(e) {
		var e   = e || window.event;
		var src = e.target || e.srcElement;
		if (typeof e.stopPropagation === "function") {
			e.stopPropagation();
		}
		if (typeof e.cancelBubble !== "undefined") {
			e.cancelBubble = true;
		}
		if (typeof e.preventDefault === "function") {
			e.preventDefault();
		}
		if (typeof e.returnValue !== "undefined") {
			e.returnValue = false;
		}

		${2:// Do stuff with stuff}
	}
# Target
snippet targ
	var ${1:target} = ${2:event}.target || $2.srcElement;${3}
# Event
snippet ev
	var ${1:event} = ${2:ev} || window.event;${3}
#
#
#
#########
# ARRAY #
#########
# Array > Literal
snippet ar
	var ${1:array_name} = [
		${2}
	];
# Array > item
snippet arit
	${1:array_name}[${2:0}]${3}
#
#
#
##########
# OBJECT #
##########
# Object > Literal
snippet obj
	var ${1:object_name} = {${2}};
# Object > Property
snippet :
	${1:property_name} : ${2:value}
# Object > Method
snippet :f
	${1:method_name} : function(${2}) {${3}}
#
#
#
########
# JSON #
########
# JSON.parse
snippet json JSON.parse()
	JSON.parse(${1:jstr});
# JSON.stringify
snippet json JSON.stringify()
	JSON.stringify(${1:object});
#
#
#
###############
# Constructor #
###############
# Constructor > Constructor
snippet cons
	var ${1:Constructor_name} = function(${2}) {
		var self = this;
		${3}
	};
# Constructor > Public Member
snippet pub public member
	${1:this}.${2:public_property_name} = ${3};${4}
# Constructor > Privileged Method
snippet pub privileged method
	${1:this}.${2:privileged_method_name} = function(${3}) {
		${4}
	};
# Constructor > Public Method
snippet prot
	prototype.${1:method_name} = function(${2}) {
		${3}
	};
# Constructor > Inheritance
snippet inherit
	function inherit(Child, Parent) {
		var Inter = function() {};
		Inter.prototype = Parent.prototype;
		Child.prototype = new Inter();
		Child.prototype.constructor = Child;
	}
	${1}
# Constructor > New Instance
snippet new
	var ${1:instance_name} = new ${2:Constructor_name}(${3});${4}
# Console
snippet log
	console.log(${1});
# Try ... Catch
snippet try
	try {
		${1}
	}
	catch(e)${2}
# Document
snippet d
	document.
# Window
snippet w
	window.
# selfie
snippet selfie
	(function ${1:function_name}() {
		$3
	})(${2:scope});
# Module pattern
snippet mod
	var ${1:module_name} = (function $1(${2}) {
		// private properties
		// var property_name = value;

		// the exported object
		// var object = {};

		// public properties of the exported object
		// object.property_name = value;

		var $1 = {};
		${3}

		return $1;
	}());
# Getter
snippet getter
	get${1:Property_name}: function() {
		return ${2:property_name}
	}
# Setter
snippet setter
	set${1:Property_name}: function(${2:value}) {
		return (${3:property_name} = $2);
	}
# Callback
snippet callback
	callback.call(${1});
#
#
#
#######
# AMD #
#######
# require
snippet require
	require(["${1:package_name}"], function(${2:argument}) {
		${3}
	});
# define
snippet def function without dependencies
	define(${1:module_name}, function() {
		${2}
		return {};
	});
# define function with dependencies
snippet def function with dependencies
	define(${1:module_name}, [${2:dependencies}], function(${3}) {
		${4}
		return {};
	});
# define object literal
snippet def object literal
	define({
		${1}
	});
# define commonJS wrapper
snippet def commonjs wrapper
	define(function(require, exports, module) {
		${1}
	});
#
#
#
############
# CommonJS #
############
# require()
snippet req
	var ${1:instance_name} = require("${2:package_name}");
# exports
snippet exp
	module.exports = ${1}
#
#
#
##########
# JQUERY #
##########
# jquery stub
snippet ready
	$(document).ready(function() {
		${1}
	});
# jquery collection
snippet $
	$("${1}")${2}
# jquery id
snippet $#
	$("#${1}")${2}
# jquery class
snippet $.
	$(".${1}")${2}
# common jquery patterns
# WIP
# AJAX
snippet ajax ajax()		Perform an asynchronous HTTP (Ajax) request.
	$.ajax({
		url: '${1:mydomain.com/url}',
		type: '${2:POST}',
		dataType: '${3:xml/html/script/json}',
		data: ${4:$.param( $('Element or Expression}') )},
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajax ajaxComplete()	Register a handler to be called when Ajax requests complete.
	ajaxComplete(function (${1:e}, xhr, settings) {
		${2:// callback}
	});
snippet ajax ajaxError()		Register a handler to be called when Ajax requests complete with an error.
	ajaxError(function (${1:e}, xhr, settings, thrownError) {
		${2:// error callback}
	});
snippet ajax get()		Load data from the server using a HTTP GET request
	$.get('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajax post()		Load data from the server using a HTTP POST request.
	$.post('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajax ajaxPrefilter()	Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
	$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
		${3: // Modify options, control originalOptions, store jqXHR, etc}
	});
snippet ajax ajaxSend()		Attach a function to be executed before an Ajax request is sent.
	ajaxSend(function (${1:request, settings}) {
		${2:// error callback}
	});
snippet ajax ajaxSetup()		Set default values for future Ajax requests. Its use is not recommended.
	$.ajaxSetup({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: ${4:$.param( $("Element or Expression") )},
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajax ajaxStart()		Register a handler to be called when the first Ajax request begins.
	$.ajaxStart(function () {
		${1:// handler for when an AJAX call is started and no other AJAX calls are in progress;}
	});
snippet ajax ajaxStop()		Register a handler to be called when all Ajax requests have completed.
	$.ajaxStop(function () {
		${1:// handler for when all AJAX calls have been completed;}
	});
snippet ajax ajaxSuccess()	Attach a function to be executed whenever an Ajax request completes successfully.
	$.ajaxSuccess(function (${1:e}, xhr, settings) {
		${2:// handler for when any AJAX call is successfully completed;}
	});
# CALLBACKS
snippet C Callbacks()
	$.Callbacks()
snippet C add()
	add(${1:callbacks})${2}
snippet C disable()
	disable()
snippet C empty()
	empty()
snippet C fire()
	fire(${1:args})
snippet C fired()
	fired()
snippet C fireWith()
	fireWith(${1:this}, ${2:args})
snippet C has()
	has(${1:callback})
snippet C lock()
	lock()
snippet C locked()
	locked()
snippet C remove()
	remove(${1:callbacks})
# DEFFERED
snippet D Deffered()
	$.Deferred()
snippet D always()
	always(${1:callbacks})
snippet D done()
	done(${1:callbacks})
snippet D fail()
	fail(${1:callbacks})
snippet D isRejected()
	isRejected()
snippet D isResolved()
	isResolved()
snippet D notify()
	notify(${1:args})
snippet D notifyWith()
	notifyWith(${1:this}, ${2:args})
snippet D filter
	then(${1:doneFilter}, ${2:failFilter}, ${3:progressFilter})
snippet D progress()
	progress(${1:callbacks})
snippet D promise()
	promise(${1:target})
snippet D reject()
	reject(${1:args})
snippet D rejectWith()
	rejectWith(${1:this}, ${2:args})
snippet D resolve()
	resolve(${1:args})
snippet D resolveWith()
	resolveWith(${1:this}, ${2:args})
snippet D state()
	state()
snippet D then()
	then(${1:doneCallbacks}, ${2:failCallbacks}, ${3:progressCallbacks})
snippet D when()
	$.when(${1:deferreds})
# IS
snippet is is()
	is('${1:selector expression}')
snippet is isArray()
	$.isArray(${1:obj})
snippet is isEmptyObject()
	$.isEmptyObject(${1:obj})
snippet is isFunction()
	$.isFunction(${1:obj})
snippet is isNumeric()
	$.isNumeric(${1:value})
snippet is isPlainObject()
	$.isPlainObject(${1:obj})
snippet is isWindow()
	$.isWindow(${1:obj})
snippet is isXMLDoc()
	$.isXMLDoc(${1:node})
# MOUSE
snippet mouse mousedown()
	mousedown(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseenter()
	mouseenter(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseleave()
	mouseleave(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mousemove()
	mousemove(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseout()
	mouseout(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseover()
	mouseover(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseup()
	mouseup(function (${1:e}) {
		${2:// event handler}
	});
# REMOVE
snippet rem remove()
	remove()
snippet rem removeAttr()
	removeAttr('${1:attribute name}')
snippet rem removeClass()
	removeClass('${1:class name}')
snippet rem removeData()
	removeData('${1:key name}')
snippet rem removeData(a,b)
	$.removeData(${1:element}${2:, 'key name}')
snippet rem removeProp()
	removeProp('${1:property name}')
# REPLACE
snippet rep replaceAll()
	replaceAll(${1:target})
snippet rep replaceWith()
	replaceWith(${1:content})
# FADE
snippet fade fadeIn()
	fadeIn('${1:slow/400/fast}')
snippet fade fadeIn() + callback
	fadeIn('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet fade fadeOut()
	fadeOut('${1:slow/400/fast}')
snippet fade fadeOut() + callback
	fadeOut('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet fade fadeTo()
	fadeTo('${1:slow/400/fast}', ${2:0.5})
snippet fade fadeTo() + callback
	fadeTo('${1:slow/400/fast}', ${2:0.5}, function () {
		${3:// callback;}
	});
# SLIDE
snippet slide slideToggle()
	slideToggle('${1:slow/400/fast}')
snippet slide slideUp()
	slideUp('${1:slow/400/fast}')
snippet slide slideUp() + callback
	slideUp('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet slide slideDown()
	slideDown('${1:slow/400/fast}')
snippet slide slideDown() + callback
	slideDown('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
# SCROLL
snippet scroll scroll() + callback
	scroll(function (${1:e}) {
		${2:// event handler}
	});
snippet scroll scrollLeft()
	scrollLeft(${1:value})
snippet scroll scrollTop()
	scrollTop(${1:value})
# ATTR
snippet attr attr('','')
	attr('${1:attribute}', '${2:value}')
snippet attr attr({'':''})
	attr({'${1:attr1}': '${2:value1}'${3}})
# CSS
snippet css css('','')
	css('${1:attribute}', '${2:value}')
snippet css css({'':''})
	css({'${1:css1}': '${2:value1}'${3}})
# FOCUS
snippet focus focus() + callback
	focus(function (${1:e}) {
		${2:// event handler}
	});
snippet focus focusIn() + callback
	focusIn(function (${1:e}) {
		${2:// event handler}
	});
snippet focus focusOut() + callback
	focusOut(function (${1:e}) {
		${2:// event handler}
	});
# MISCELLANEOUS
snippet add add()
	add('${1:selector expression}')
snippet add addClass()
	addClass('${1:class name}')
snippet after
	after('${1:Some text <b>and bold!</b>}')
snippet andself
	andSelf()
snippet animate
	animate({${1:param1: value1, param2: value2}}, ${2:speed})
snippet append
	append('${1:Some text <b>and bold!</b>}')
snippet appendto
	appendTo('${1:selector expression}')
snippet before
	before('${1:Some text <b>and bold!</b>}')
snippet bind
	bind('${1:event name}', function (${2:e}) {
		${3:// event handler}
	});
snippet blur
	blur(function (${1:e}) {
		${2:// event handler}
	});
snippet change
	change(function (${1:e}) {
		${2:// event handler}
	});
snippet children
	children('${1:selector expression}')
snippet clearq
	clearQueue(${1:'queue name'})
snippet click
	click(function (${1:e}) {
		${2:// event handler}
	});
snippet clone
	clone()
snippet contains
	$.contains(${1:container}, ${2:contents});
snippet csshooks
	$.cssHooks['${1:CSS prop}'] = {
		get: function (elem, computed, extra) {
			${2: // handle getting the CSS property}
		},
		set: function (elem, value) {
			${3: // handle setting the CSS value}
		}
	};
snippet data
	data(${1:obj})
snippet dataa
	$.data('${1:selector expression}', '${2:key}'${3:, 'value'})
snippet dblclick
	dblclick(function (${1:e}) {
		${2:// event handler}
	});
snippet delay
	delay('${1:slow/400/fast}'${2:, 'queue name'})
snippet dele
	delegate('${1:selector expression}', '${2:event name}', function (${3:e}) {
		${4:// event handler}
	});
snippet deq
	dequeue(${1:'queue name'})
snippet deqq
	$.dequeue('${1:selector expression}'${2:, 'queue name'})
snippet detach
	detach('${1:selector expression}')
snippet die
	die(${1:event}, ${2:handler})
snippet each
	each(function (index) {
		${1:this.innerHTML = this + " is the element, " + index + " is the position";}
	});
snippet el
	$('<${1}/>'${2:, {}})
snippet eltrim
	$.trim('${1:string}')
snippet empty
	empty()
snippet end
	end()
snippet eq
	eq(${1:element index})
snippet error
	error(function (${1:e}) {
		${2:// event handler}
	});
snippet eventsmap
	{
		:f${1}
	}
snippet extend
	$.extend(${1:true, }${2:target}, ${3:obj})
snippet filter
	filter('${1:selector expression}')
snippet filtert
	filter(function (${1:index}) {
		${2}
	})
snippet find
	find('${1:selector expression}')
snippet get
	get(${1:element index})
snippet getjson
	$.getJSON('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet getscript
	$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {
		${2:// callback}
	});
snippet grep
	$.grep(${1:array}, function (item, index) {
		${2}
	}${3:, true});
snippet hasc
	hasClass('${1:className}')
snippet hasd
	$.hasData('${1:selector expression}');
snippet height
	height(${1:integer})
snippet hide
	hide('${1:slow/400/fast}')
snippet hidec
	hide('${1:slow/400/fast}', function () {
		${2:// callback}
	});
snippet hover
	hover(function (${1:e}) {
		${2:// event handler}
	}, function ($1) {
		${3:// event handler}
	});
snippet html
	html('${1:Some text <b>and bold!</b>}')
snippet inarr
	$.inArray(${1:value}, ${2:array});
snippet insa
	insertAfter('${1:selector expression}')
snippet insb
	insertBefore('${1:selector expression}')
snippet kdown
	keydown(function (${1:e}) {
		${2:// event handler}
	});
snippet kpress
	keypress(function (${1:e}) {
		${2:// event handler}
	});
snippet kup
	keyup(function (${1:e}) {
		${2:// event handler}
	});
snippet last
	last('${1:selector expression}')
snippet live
	live('${1:events}', function (${2:e}) {
		${3:// event handler}
	});
snippet load
	load(function (${1:e}) {
		${2:// event handler}
	});
snippet loadf
	load('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (responseText, textStatus, xhr) {
			${3:// success callback}
		}
	});
snippet makearray
	$.makeArray(${1:obj});
snippet map
	map(function (${1:index}, ${2:element}) {
		${3:// callback}
	});
snippet mapp
	$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
		${4:// callback}
	});
snippet merge
	$.merge(${1:target}, ${2:original});
snippet next
	next('${1:selector expression}')
snippet nexta
	nextAll('${1:selector expression}')
snippet nextu
	nextUntil('${1:selector expression}'${2:, 'filter expression'})
snippet not
	not('${1:selector expression}')
snippet off
	off('${1:events}', '${2:selector expression}'${3:, handler})
snippet offset
	offset()
snippet offsetp
	offsetParent()
snippet on
	on('${1:events}', '${2:selector expression}', function (${3:e}) {
		${4:// event handler}
	});
snippet one
	one('${1:event name}', function (${2:e}) {
		${3:// event handler}
	});
snippet outerh
	outerHeight()
snippet outerw
	outerWidth()
snippet param
	$.param(${1:obj})
snippet parent
	parent('${1:selector expression}')
snippet parents
	parents('${1:selector expression}')
snippet parentsu
	parentsUntil('${1:selector expression}'${2:, 'filter expression'})
snippet parsejson
	$.parseJSON(${1:data})
snippet parsexml
	$.parseXML(${1:data})
snippet pos
	position()
snippet prepend
	prepend('${1:Some text <b>and bold!</b>}')
snippet prependto
	prependTo('${1:selector expression}')
snippet prev
	prev('${1:selector expression}')
snippet preva
	prevAll('${1:selector expression}')
snippet prevu
	prevUntil('${1:selector expression}'${2:, 'filter expression'})
snippet promise
	promise(${1:'fx'}, ${2:target})
snippet prop
	prop('${1:property name}')
snippet proxy
	$.proxy(${1:function}, ${2:this})
snippet pushstack
	pushStack(${1:elements})
snippet queue
	queue(${1:name}${2:, newQueue})
snippet queuee
	$.queue(${1:element}${2:, name}${3:, newQueue})
snippet reset
	reset(function (${1:e}) {
		${2:// event handler}
	});
snippet resize
	resize(function (${1:e}) {
		${2:// event handler}
	});
snippet select
	select(function (${1:e}) {
		${2:// event handler}
	});
snippet serialize
	serialize()
snippet serializea
	serializeArray()
snippet show
	show('${1:slow/400/fast}')
snippet showc
	show('${1:slow/400/fast}', function () {
		${2:// callback}
	});
snippet sib
	siblings('${1:selector expression}')
snippet size
	size()
snippet slice
	slice(${1:start}${2:, end})
snippet stop
	stop('${1:queue}', ${2:false}, ${3:false})
snippet submit
	submit(function (${1:e}) {
		${2:// event handler}
	});
snippet text
	text(${1:'some text'})
snippet this
	$(this)
snippet toarr
	toArray()
snippet tog
	toggle(function (${1:e}) {
		${2:// event handler}
	}, function ($1) {
		${3:// event handler}
	});
snippet togclass
	toggleClass('${1:class name}')
snippet togsh
	toggle('${1:slow/400/fast}')
snippet trig
	trigger('${1:event name}')
snippet trigh
	triggerHandler('${1:event name}')
snippet $trim
	$.trim(${1:str})
snippet $type
	$.type(${1:obj})
snippet unbind
	unbind('${1:event name}')
snippet undele
	undelegate(${1:selector expression}, ${2:event}, ${3:handler})
snippet uniq
	$.unique(${1:array})
snippet unload
	unload(function (${1:e}) {
		${2:// event handler}
	});
snippet unwrap
	unwrap()
snippet val
	val('${1:text}')
snippet width
	width(${1:integer})
snippet wrap
	wrap('${1:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')
#
#
#
#############
# TWEENLITE #
#############
snippet tw
	Tween${1:Lite|Max}.${2:to|from}(${3:element}, ${4:1}, {${5}});
snippet tl
	var ${1:tl} = new TimelineLite();
snippet to to()		TimelineLite: Adds a TweenLite.to() tween to the end of the timeline (or elsewhere using the "position" parameter).
	to(${1:element}, ${2:1}, {${3}});
snippet meth call()	TimelineLite: Adds a callback to the end of the timeline (or elsewhere using the "position" parameter).
	call(${1:function_name});
snippet meth pause()	TimelineLite: Pauses the instance, optionally jumping to a specific time.
	pause(${1});
snippet meth resume()	TimelineLite: Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first.
	resume(${1});
snippet meth restart()	TimelineLite: Restarts and begins playing forward from the beginning.
	restart(${1});
snippet meth reverse()	TimelineLite: Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween's ease.
	reverse(${1});
snippet meth play()	TimelineLite: Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is).
	play(${1});
snippet meth seek()	TimelineLite: [override] Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed.
	seek(${1:2});
snippet meth timescale()	TimelineLite: Factor that's used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.
	timeScale(${1:0.5});
snippet meth add()	TimelineLite: [override] Adds a tween, timeline, callback, or label (or an array of them) to the timeline.
	add(${1:what}, ${2:where});
snippet meth addLabel()	TimelineLite: Adds a label to the timeline, making it easy to mark important positions/times.
	addLabel(${1:label}, ${2:position});
snippet onc
	onComplete: function() {${1}}
snippet ons
	onStart: function() {${1}}
#
#
#
###########
# PIXI V2 #
###########
# Draw graphic rectangle with PixiJS
snippet pixi rect
	var ${1:_rect} = new PIXI.Graphics();
	$1.beginFill(${2:0xFF0000}, 1);
	$1.drawRect(${3:0}, ${4:0}, ${5:100}, ${6:100});
	$1.endFill();
# PIXI (from Mazarine)
snippet pixi AMD class
	define('${1:primary_type_name}', [], function() {

		var _$1 = function() {

			var _scope;

			PIXI.DisplayObjectContainer.call(this);
			_scope = this;

			function build() {
			}

			this.process = function() {
			};

			this.resize = function (w, h) {
			};

			build();
		};

		_$1.prototype = Object.create(PIXI.DisplayObjectContainer.prototype);

		return _$1;
	});
# Pixi Template Class
snippet pixi main
	(function(parent) {
		var _stats, _DOMContainer, _stage, _renderer;

		parent.${1:primary_type_name} = function() {
			init();
		};

		function init() {
			_DOMContainer = document.createElement('div');
			document.body.appendChild(_DOMContainer);
			_renderer = new PIXI.CanvasRenderer();
			_renderer.transparent = false;
			_DOMContainer.appendChild(_renderer.view);
			_stage = new PIXI.Stage(0xffffff);
			stat();
			initEvents();
			build();
		}

		function build() {
		}

		function stat() {
			_stats = new Stats();
			_stats.domElement.style.position = 'absolute';
			_stats.domElement.style.top = '0px';
			_DOMContainer.appendChild(_stats.domElement);
		}

		function initEvents() {
			if (getDevice() == "desktop") {
				_renderer.view.addEventListener("mousemove", onMove, false);
				// _renderer.view.addEventListener("mousedown", onDown, false);
				// _renderer.view.addEventListener("mouseup", onUp, false);
				// _renderer.view.addEventListener("mouseout", onUp, false);
			} else {
				_renderer.view.addEventListener('touchmove', onMove, false);
				// _renderer.view.addEventListener('touchstart', onDown, false);
				// _renderer.view.addEventListener('touchend', onUp, false);
			}

			window.addEventListener("resize", onResize);
			onResize(null);
			requestAnimFrame(enterFrame);
		}

		function draw() {
		}

		function onMove(event) {
			event.preventDefault();
		}

		function onResize(event) {
			_renderer.resize(window.innerWidth, window.innerHeight);
		}

		function enterFrame() {
			draw();
			requestAnimFrame(enterFrame);
			_renderer.render(_stage);
			_stats.update();
		}
	})(app);
# Boot Class implemente Pixi V2 framework
snippet pixi bootstrap
	var ${1:primary_type_name} = $1 || {};

	define('$1', [], function() {
		var _$1 = function(args) {

			console.log("<< $1 >>");

			// CONFIG
			var _statEnabled       = true;
			var _centerDesktop     = false;
			var _widthDesktopView  = 1280;
			var _heightDesktopView = 800;

			// CONST
			var RETINA_BASE_WIDTH  = 2048;
			var RETINA_BASE_HEIGHT = 1536;

			var _container;
			var _stats;
			var _stage;
			var _rendererOptions;
			var _renderer;
			var _page;
			var _hcoef;
			var _vcoef;
			var _h;
			var _w;
			var _viewPosX;
			var _viewPosY;
			var _canvas = args[0];

			function init() {
				_stage = new PIXI.Stage(0xffffff);
				_rendererOptions = {view : _canvas, transparent : false, resolution : window.devicePixelRatio || 1};
				_renderer = new PIXI.CanvasRenderer(0, 0, _rendererOptions);
				if (!_canvas) {
					document.body.appendChild(_renderer.view);
				}
				onReady();
			}

			function onReady() {
				// INIT STRUCTURE
				build();
				// LOAD FONTS AND START APP, ELSE CALL "start" FUNCTION
				//Tools.loadFont(["HelveticaNeueLTStd-UltLt", "HelveticaNeueLTStd-Roman", "HelveticaNeueLTStd-Hv", "HelveticaNeueLTStd-Th"], start);
				start();
			}

			function build() {
				_container = new PIXI.DisplayObjectContainer();
				_stage.addChild(_container);
			}

			function initPages() {
				$1.stage = _stage;
				$1.view = _renderer.view;
				$1.resolution = window.devicePixelRatio || 1;
				$1.textResolution = 2;
				//$1.fonts = {HelveticaNeueLTStdUltLt : "HelveticaNeueLTStd-UltLt", HelveticaNeueLTStdRoman : "HelveticaNeueLTStd-Roman", HelveticaNeueLTStdHv : "HelveticaNeueLTStd-Hv", HelveticaNeueLTStdTh : "HelveticaNeueLTStd-Th"};

				// a new imported Main project Class //
				//_page = new MainClass();
				//_container.addChild(_page);
			}

			function initEvents() {
				window.addEventListener("resize", $1.onResize);
				$1.onResize(null);
			}

			$1.onResize = function() {
				_h = window.innerHeight;
				_w = window.innerWidth;

				// CENTER DESKTOP NAVIGATOR
				if (_centerDesktop &amp;&amp; Tools.getDevice() == "desktop") {
					if (_w >= _widthDesktopView) {
						_w = _widthDesktopView;
					}
					if (_h >= _heightDesktopView) {
						_h = _heightDesktopView;
					}

					_viewPosX = window.innerWidth - _w >> 1;
					_viewPosY = window.innerHeight - _h >> 1;
				}

				_hcoef = _w / RETINA_BASE_WIDTH;
				_vcoef = _h / RETINA_BASE_HEIGHT;

				if (_page &amp;&amp; _page.resize) {
					_page.resize(_w, _h, _hcoef, _vcoef, _viewPosX, _viewPosY);
				}

				_renderer.resize(_w, _h);
				_renderer.view.style.width = _w + "px";
				_renderer.view.style.height = _h + "px";

				window.scrollTo(0, 0);
			};

			function start() {
				console.log("start");

				// INIT PAGES
				initPages();

				// INIT DOM EVENTS
				initEvents();

				requestAnimFrame(processFrame);
				if (_statEnabled) {
					stat();
				}
			}

			function processFrame() {
				requestAnimFrame(processFrame);
				_renderer.render(_stage);

				if (_page &amp;&amp; _page.process) {
					_page.process();
				}

				if (_statEnabled) {
					_stats.update();
				}
			}

			function stat() {
				_stats = new Stats();
				_stats.domElement.style.position = 'absolute';
				_stats.domElement.style.top = '0px';
				_stats.domElement.style.left = '0px';
				document.body.appendChild(_stats.domElement);
			}

			init();
		};

		return _$1;
	});
#
#
#
############
# Backbone #
############
# backbone collection definition
snippet bbc
	Backbone.Collection.extend({${1}});
# backbone model definition
snippet bbm
	Backbone.Model.extend({
		initialize: function() {${1}}
	});
# backbone router definition
snippet bbr
	Backbone.Router.extend({
		routes: {${1}}
	});
# backbone view definition
snippet bbv
	Backbone.View.extend({
		initialize: function() {${3}},
		el: ${1:selector},
		model: ${2:model},
		template: ${3:template},
		events: {},
		render: function(){}
	});
#
#
#
##############
# Underscore #
##############
snippet <
	<%= ${1} %>
