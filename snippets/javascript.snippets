# Function
snippet fun
	function ${1:function_name}(${2}) {
		${3}
	}
# Anonymous Function
snippet f
	function(${1}){${2}}
# if
snippet if
	if (${1}) {
		${2}
	}
# if ... else
snippet ife
	if (${1}) {
		${2}
	} else {
		${3}
	}
snippet else
	else {
		${1}
	}
# ternary operator
snippet ter
	${1:condition} ? ${2:if true} : ${3:if false}
# switch
snippet switch
	switch(${1:expression}) {
		case ${3} :
			${4}
			break;
		default:
			${2}
	}
# case
snippet case
	case ${1} :
		${2}
		break;
# for (...) {...} (Cached length)
snippet for
	for (var ${2:i} = 0, ${3:len} = ${1:things.length}; $2 < $3; $2++) {
		${4}
	}
# for (...) {...}
snippet forr Classic
	for (var ${2:i} = 0; $2 < ${1:things.length}; $2++) {
		${3}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr Improved Native For-Loop
	for (var ${2:i} = ${1:things.length} - 1; $2 >= 0; $2--) {
		${3}
	}
# for...in
snippet fori
	for (${1:variable} in ${2:object}) {
		${3}
	}
# while (...) {...}
snippet while
	while (${1}) {
		${2}
	}
# do...while
snippet do
	do {
		${2}
	} while (${1});
# setTimeout function
snippet time setTimeout
	window.setTimeout(function() {${2}}, ${1:100});
# setTimeout function
snippet time setInterval
	window.setInterval(function() {${2}}, ${1:100});
# Get Elements
snippet gett
	getElementsByTagName('${1}')
# Get Element
snippet geti
	getElementById('${1}')
# insertAdjacentHTML
snippet ins
	insertAdjacentHTML('${1:beforebegin|afterbegin|beforeend|afterend}', '${2:text}')
#
#
#
##########
# EVENTS #
##########
# Add Events
snippet events
	if (typeof(document.addEventListener) !== 'undefined') {
		${1:element}.addEventListener('${2:event_name}', ${3:handler_name}, false);
	} else if (typeof(document.attachEvent) !== 'undefined') {
		$1.attachEvent('on$2', $3);
	} else {
		$1.['on$2'] = $3;
	}${4}
# Add Event
snippet adde
	addEventListener('${1:event_name}', ${2:function_name}, false);
# Attach Event
snippet atte
	attachEvent('on${1:event_name}', ${2:function_name});
# Target
snippet tar nodeName
	if (e.target && e.target.nodeName.toLowercase() === "${1:nodename}") {
		${2}
	}
snippet tar id
	if (e.target && e.target.getAttribute("id") === "${1:id}") {
		${2}
	}
snippet tar class
	if (e.target && /${1:pattern}/.test(e.target.getAttribute("class"))) {
		${2}
	}
#
#
#
#########
# ARRAY #
#########
# Array > Literal
snippet ar
	var ${1:array_name} = [
		${2}
	];
# Array > item
snippet arit
	${1:array_name}[${2:0}]
#
#
#
##########
# OBJECT #
##########
# Object > Literal
snippet ob
	var ${1:object_name} = {
		${2}
	};
# Object > Property
snippet :
	${1:property_name} : ${2:value}
# Object > Method
snippet :f
	${1:method_name} : function(${2}) {${3}}
# Namespace
snippet ns
	var ${1:namespace} = $1 || {};
#
#
#
########
# JSON #
########
# JSON.parse
snippet json JSON.parse()
	JSON.parse(${1:jstr});
# JSON.stringify
snippet json JSON.stringify()
	JSON.stringify(${1:object});
#
#
#
###############
# Constructor #
###############
# Constructor > Constructor
snippet cons
	var ${1:Constructor_name} = function(${2}) {
		${3}
	};
# Constructor > Public Property
snippet thisp
	this.${1:public_property_name} = ${2};
# Constructor > Privileged Method
snippet thisf privileged method
	this.${1:privileged_method_name} = function(${2}) {
		${3}
	};
# Constructor > Public Method on the prototype
snippet pro
	prototype.${1:method_name} = function(${2}) {
		${3}
	};
# Constructor > Inheritance
snippet inherit
	function inherit(Child, Parent) {
		var Inter = function() {};
		Inter.prototype = Parent.prototype;
		Child.prototype = new Inter();
		Child.prototype.constructor = Child;
	}
	${1}
# Constructor > New Instance
snippet new
	var ${1:instance_name} = new ${2:Constructor_name}(${3});
# Console
snippet log
	console.log(${1});
# Try ... Catch
snippet try
	try {
		${1}
	} catch(e) {
		${2}
	}
# Document
snippet d
	document.
# Window
snippet w
	window.
# selfie
snippet selfie
	(function ${1:function_name}() {
		${3}
	})(${2:arguments});
# Module pattern
snippet mod
	var ${1:module_name} = (function $1(${2}) {
		// private properties
		// var property_name = value;

		// the exported object
		// var object = {};

		// public properties of the exported object
		// object.property_name = value;

		var $1 = {};
		${3}

		return $1;
	}());
# Getter
snippet getter
	get_${1:property_name}: function() {
		return this.${2:property_name}
	}
# Setter
snippet setter
	set_${1:property_name}: function(value) {
		try {
			this.$1 = value;
			return true;
		} catch(e) {
			return false;
		}
	}
# Callback
snippet call
	callback.call(${1});
snippet apply
	callback.apply(${1});
#
#
#
#######
# AMD #
#######
# require
snippet require
	require(["${1:package_name}"], function(${2:argument}) {
		${3}
	});
# define
snippet def function without dependencies
	define(${1:module_name}, function() {
		${2}
		return {};
	});
# define function with dependencies
snippet def function with dependencies
	define(${1:module_name}, [${2:dependencies}], function(${3}) {
		${4}
		return {};
	});
# define object literal
snippet def object literal
	define({
		${1}
	});
# define commonJS wrapper
snippet def commonjs wrapper
	define(function(require, exports, module) {
		${1}
	});
#
#
#
############
# CommonJS #
############
# require()
snippet req
	var ${1:instance_name} = require("${2:package_name}");
# exports
snippet exp
	module.exports = ${1};
#
#
#
##########
# JQUERY #
##########
# jquery stub
snippet ready
	$(document).ready(function() {
		${1}
	});
# jquery collection
snippet $
	$("${1}")${2}
# jquery id
snippet $#
	$("#${1}")${2}
# jquery class
snippet $.
	$(".${1}")${2}
# common jquery patterns
# AJAX
snippet ajax ajax()		Perform an asynchronous HTTP (Ajax) request.
	$.ajax({
		url: '${1:mydomain.com/url}',
		type: '${2:POST}',
		dataType: '${3:xml/html/script/json}',
		data: ${4:$.param( $('Element or Expression}') )},
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajax ajaxComplete()	Register a handler to be called when Ajax requests complete.
	ajaxComplete(function (${1:e}, xhr, settings) {
		${2:// callback}
	});
snippet ajax ajaxError()		Register a handler to be called when Ajax requests complete with an error.
	ajaxError(function (${1:e}, xhr, settings, thrownError) {
		${2:// error callback}
	});
snippet ajax get()		Load data from the server using a HTTP GET request
	$.get('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajax post()		Load data from the server using a HTTP POST request.
	$.post('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajax ajaxPrefilter()	Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
	$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
		${3: // Modify options, control originalOptions, store jqXHR, etc}
	});
snippet ajax ajaxSend()		Attach a function to be executed before an Ajax request is sent.
	ajaxSend(function (${1:request, settings}) {
		${2:// error callback}
	});
snippet ajax ajaxSetup()		Set default values for future Ajax requests. Its use is not recommended.
	$.ajaxSetup({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: ${4:$.param( $("Element or Expression") )},
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajax ajaxStart()		Register a handler to be called when the first Ajax request begins.
	$.ajaxStart(function () {
		${1:// handler for when an AJAX call is started and no other AJAX calls are in progress;}
	});
snippet ajax ajaxStop()		Register a handler to be called when all Ajax requests have completed.
	$.ajaxStop(function () {
		${1:// handler for when all AJAX calls have been completed;}
	});
snippet ajax ajaxSuccess()	Attach a function to be executed whenever an Ajax request completes successfully.
	$.ajaxSuccess(function (${1:e}, xhr, settings) {
		${2:// handler for when any AJAX call is successfully completed;}
	});
# CALLBACKS
snippet C Callbacks()
	$.Callbacks()
snippet C add()
	add(${1:callbacks})${2}
snippet C disable()
	disable()
snippet C empty()
	empty()
snippet C fire()
	fire(${1:args})
snippet C fired()
	fired()
snippet C fireWith()
	fireWith(${1:this}, ${2:args})
snippet C has()
	has(${1:callback})
snippet C lock()
	lock()
snippet C locked()
	locked()
snippet C remove()
	remove(${1:callbacks})
# DEFFERED
snippet D Deffered()
	$.Deferred()
snippet D always()
	always(${1:callbacks})
snippet D done()
	done(${1:callbacks})
snippet D fail()
	fail(${1:callbacks})
snippet D isRejected()
	isRejected()
snippet D isResolved()
	isResolved()
snippet D notify()
	notify(${1:args})
snippet D notifyWith()
	notifyWith(${1:this}, ${2:args})
snippet D filter
	then(${1:doneFilter}, ${2:failFilter}, ${3:progressFilter})
snippet D progress()
	progress(${1:callbacks})
snippet D promise()
	promise(${1:target})
snippet D reject()
	reject(${1:args})
snippet D rejectWith()
	rejectWith(${1:this}, ${2:args})
snippet D resolve()
	resolve(${1:args})
snippet D resolveWith()
	resolveWith(${1:this}, ${2:args})
snippet D state()
	state()
snippet D then()
	then(${1:doneCallbacks}, ${2:failCallbacks}, ${3:progressCallbacks})
snippet D when()
	$.when(${1:deferreds})
# IS
snippet is is()
	is('${1:selector expression}')
snippet is isArray()
	$.isArray(${1:obj})
snippet is isEmptyObject()
	$.isEmptyObject(${1:obj})
snippet is isFunction()
	$.isFunction(${1:obj})
snippet is isNumeric()
	$.isNumeric(${1:value})
snippet is isPlainObject()
	$.isPlainObject(${1:obj})
snippet is isWindow()
	$.isWindow(${1:obj})
snippet is isXMLDoc()
	$.isXMLDoc(${1:node})
# MOUSE
snippet mouse mousedown()
	mousedown(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseenter()
	mouseenter(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseleave()
	mouseleave(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mousemove()
	mousemove(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseout()
	mouseout(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseover()
	mouseover(function (${1:e}) {
		${2:// event handler}
	});
snippet mouse mouseup()
	mouseup(function (${1:e}) {
		${2:// event handler}
	});
# REMOVE
snippet rem remove()
	remove()
snippet rem removeAttr()
	removeAttr('${1:attribute name}')
snippet rem removeClass()
	removeClass('${1:class name}')
snippet rem removeData()
	removeData('${1:key name}')
snippet rem removeData(a,b)
	$.removeData(${1:element}${2:, 'key name}')
snippet rem removeProp()
	removeProp('${1:property name}')
# REPLACE
snippet rep replaceAll()
	replaceAll(${1:target})
snippet rep replaceWith()
	replaceWith(${1:content})
# FADE
snippet fade fadeIn()
	fadeIn('${1:slow/400/fast}')
snippet fade fadeIn() + callback
	fadeIn('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet fade fadeOut()
	fadeOut('${1:slow/400/fast}')
snippet fade fadeOut() + callback
	fadeOut('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet fade fadeTo()
	fadeTo('${1:slow/400/fast}', ${2:0.5})
snippet fade fadeTo() + callback
	fadeTo('${1:slow/400/fast}', ${2:0.5}, function () {
		${3:// callback;}
	});
# SLIDE
snippet slide slideToggle()
	slideToggle('${1:slow/400/fast}')
snippet slide slideUp()
	slideUp('${1:slow/400/fast}')
snippet slide slideUp() + callback
	slideUp('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
snippet slide slideDown()
	slideDown('${1:slow/400/fast}')
snippet slide slideDown() + callback
	slideDown('${1:slow/400/fast}', function () {
		${2:// callback;}
	});
# SCROLL
snippet scroll scroll() + callback
	scroll(function (${1:e}) {
		${2:// event handler}
	});
snippet scroll scrollLeft()
	scrollLeft(${1:value})
snippet scroll scrollTop()
	scrollTop(${1:value})
# ATTR
snippet attr attr('','')
	attr('${1:attribute}', '${2:value}')
snippet attr attr({'':''})
	attr({'${1:attr1}': '${2:value1}'${3}})
# CSS
snippet css css('','')
	css('${1:attribute}', '${2:value}')
snippet css css({'':''})
	css({'${1:css1}': '${2:value1}'${3}})
# FOCUS
snippet focus focus() + callback
	focus(function (${1:e}) {
		${2:// event handler}
	});
snippet focus focusIn() + callback
	focusIn(function (${1:e}) {
		${2:// event handler}
	});
snippet focus focusOut() + callback
	focusOut(function (${1:e}) {
		${2:// event handler}
	});
# MISCELLANEOUS
snippet a add()
	add('${1:selector expression}')
snippet a addClass()
	addClass('${1:class name}')
snippet a after()
	after('${1:Some text <b>and bold!</b>}')
snippet a andSelf()
	andSelf()
snippet a animate()
	animate({${1:param1: value1, param2: value2}}, ${2:speed})
snippet a append()
	append('${1:Some text <b>and bold!</b>}')
snippet a appendto()
	appendTo('${1:selector expression}')
snippet b before()
	before('${1:Some text <b>and bold!</b>}')
snippet b bind()
	bind('${1:event name}', function (${2:e}) {
		${3:// event handler}
	});
snippet b blur()
	blur(function (${1:e}) {
		${2:// event handler}
	});
snippet c change()
	change(function (${1:e}) {
		${2:// event handler}
	});
snippet c children()
	children('${1:selector expression}')
snippet c clearQueue()
	clearQueue(${1:'queue name'})
snippet c click()
	click(function (${1:e}) {
		${2:// event handler}
	});
snippet c clone()
	clone()
snippet c contains()
	$.contains(${1:container}, ${2:contents});
snippet c $.cssHooks
	$.cssHooks['${1:CSS prop}'] = {
		get: function (elem, computed, extra) {
			${2: // handle getting the CSS property}
		},
		set: function (elem, value) {
			${3: // handle setting the CSS value}
		}
	};
snippet d data()
	data(${1:obj})
snippet d $.data()
	$.data('${1:selector expression}', '${2:key}'${3:, 'value'})
snippet d dblclick()
	dblclick(function (${1:e}) {
		${2:// event handler}
	});
snippet d delay()
	delay('${1:slow/400/fast}'${2:, 'queue name'})
snippet d delegate()
	delegate('${1:selector expression}', '${2:event name}', function (${3:e}) {
		${4:// event handler}
	});
snippet d dequeue()
	dequeue(${1:'queue name'})
snippet d $.dequeue()
	$.dequeue('${1:selector expression}'${2:, 'queue name'})
snippet d detach()
	detach('${1:selector expression}')
snippet d die()
	die(${1:event}, ${2:handler})
snippet e each()
	each(function (index) {
		${1:this.innerHTML = this + " is the element, " + index + " is the position";}
	});
snippet e el
	$('<${1}/>'${2:, {}})
snippet $ $.trim()
	$.trim('${1:string}')
snippet e empty()
	empty()
snippet e end()
	end()
snippet e eq()
	eq(${1:element index})
snippet e error()
	error(function (${1:e}) {
		${2:// event handler}
	});
snippet e eventsmap
	{
		:f${1}
	}
snippet $ $.extend()
	$.extend(${1:true, }${2:target}, ${3:obj})
snippet f filter()
	filter('${1:selector expression}')
snippet f filter() + function()
	filter(function (${1:index}) {
		${2}
	})
snippet f find()
	find('${1:selector expression}')
snippet g get()
	get(${1:element index})
snippet $ $.getJSON()
	$.getJSON('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet $ $.getScript()
	$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {
		${2:// callback}
	});
snippet $ $.grep()
	$.grep(${1:array}, function (item, index) {
		${2}
	}${3:, true});
snippet h hasClass()
	hasClass('${1:className}')
snippet $ $.hasData()
	$.hasData('${1:selector expression}');
snippet h height()
	height(${1:integer})
snippet h hide()
	hide('${1:slow/400/fast}')
snippet h hide() + callback
	hide('${1:slow/400/fast}', function () {
		${2:// callback}
	});
snippet h hover()
	hover(function (${1:e}) {
		${2:// event handler}
	}, function ($1) {
		${3:// event handler}
	});
snippet h html()
	html('${1:Some text <b>and bold!</b>}')
snippet $ $.inArray()
	$.inArray(${1:value}, ${2:array});
snippet i insertAfter()
	insertAfter('${1:selector expression}')
snippet i insertBefore()
	insertBefore('${1:selector expression}')
snippet k keydown()
	keydown(function (${1:e}) {
		${2:// event handler}
	});
snippet k keypress()
	keypress(function (${1:e}) {
		${2:// event handler}
	});
snippet k keyup()
	keyup(function (${1:e}) {
		${2:// event handler}
	});
snippet l last()
	last('${1:selector expression}')
snippet l live()
	live('${1:events}', function (${2:e}) {
		${3:// event handler}
	});
snippet l load()
	load(function (${1:e}) {
		${2:// event handler}
	});
snippet l load() + function()
	load('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (responseText, textStatus, xhr) {
			${3:// success callback}
		}
	});
snippet m $.makeArray()
	$.makeArray(${1:obj});
snippet m map()
	map(function (${1:index}, ${2:element}) {
		${3:// callback}
	});
snippet m map() + function()
	$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
		${4:// callback}
	});
snippet m $.merge()
	$.merge(${1:target}, ${2:original});
snippet n next()
	next('${1:selector expression}')
snippet n nextAll()
	nextAll('${1:selector expression}')
snippet n nextUntil()
	nextUntil('${1:selector expression}'${2:, 'filter expression'})
snippet n not()
	not('${1:selector expression}')
snippet o off()
	off('${1:events}', '${2:selector expression}'${3:, handler})
snippet o offset()
	offset()
snippet o offsetParent()
	offsetParent()
snippet o on()
	on('${1:events}', '${2:selector expression}', function (${3:e}) {
		${4:// event handler}
	});
snippet o one()
	one('${1:event name}', function (${2:e}) {
		${3:// event handler}
	});
snippet o outerHeight()()
	outerHeight()
snippet o outerWidth()()
	outerWidth()
snippet p $.param()
	$.param(${1:obj})
snippet p parent()
	parent('${1:selector expression}')
snippet p parents()
	parents('${1:selector expression}')
snippet p parentsUntil()
	parentsUntil('${1:selector expression}'${2:, 'filter expression'})
snippet p $.parseJSON()
	$.parseJSON(${1:data})
snippet p $.parseXML()
	$.parseXML(${1:data})
snippet p pos()
	position()
snippet p prepend()
	prepend('${1:Some text <b>and bold!</b>}')
snippet p prependto()
	prependTo('${1:selector expression}')
snippet p prev()
	prev('${1:selector expression}')
snippet p prevAll()
	prevAll('${1:selector expression}')
snippet p prevUntil()
	prevUntil('${1:selector expression}'${2:, 'filter expression'})
snippet p promise()
	promise(${1:'fx'}, ${2:target})
snippet p prop()
	prop('${1:property name}')
snippet p $.proxy()
	$.proxy(${1:function}, ${2:this})
snippet p pushStack()
	pushStack(${1:elements})
snippet q queue()
	queue(${1:name}${2:, newQueue})
snippet q $.queuee()
	$.queue(${1:element}${2:, name}${3:, newQueue})
snippet r reset()
	reset(function (${1:e}) {
		${2:// event handler}
	});
snippet r resize()
	resize(function (${1:e}) {
		${2:// event handler}
	});
snippet s select()
	select(function (${1:e}) {
		${2:// event handler}
	});
snippet s serialize()
	serialize()
snippet s serializeArray()
	serializeArray()
snippet s show()
	show('${1:slow/400/fast}')
snippet s show() + callback
	show('${1:slow/400/fast}', function () {
		${2:// callback}
	});
snippet s siblings()
	siblings('${1:selector expression}')
snippet s size()
	size()
snippet s slice()
	slice(${1:start}${2:, end})
snippet s stop()
	stop('${1:queue}', ${2:false}, ${3:false})
snippet s submit()
	submit(function (${1:e}) {
		${2:// event handler}
	});
snippet t text()
	text(${1:'some text'})
snippet t $(this)
	$(this)
snippet t toArray()
	toArray()
snippet t toggle()
	toggle(function (${1:e}) {
		${2:// event handler}
	}, function ($1) {
		${3:// event handler}
	});
snippet t togleClass()
	toggleClass('${1:class name}')
snippet t trigger()
	trigger('${1:event name}')
snippet t triggerHandler()
	triggerHandler('${1:event name}')
snippet t $.trim()
	$.trim(${1:str})
snippet t $.type()
	$.type(${1:obj})
snippet u unbind()
	unbind('${1:event name}')
snippet u undelegate()
	undelegate(${1:selector expression}, ${2:event}, ${3:handler})
snippet u uniq()
	$.unique(${1:array})
snippet u unload()
	unload(function (${1:e}) {
		${2:// event handler}
	});
snippet u unwrap()
	unwrap()
snippet v val()
	val('${1:text}')
snippet w width()
	width(${1:integer})
snippet w wrap()
	wrap('${1:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')
#
#
#
#############
# TWEENLITE #
#############
snippet tw
	Tween${1:Lite|Max}.${2:to|from}(${3:element}, ${4:1}, {${5}});
snippet tl
	var ${1:tl} = new TimelineLite();
snippet to to()		TimelineLite: Adds a TweenLite.to() tween to the end of the timeline (or elsewhere using the "position" parameter).
	to(${1:element}, ${2:1}, {${3}});
snippet meth call()	TimelineLite: Adds a callback to the end of the timeline (or elsewhere using the "position" parameter).
	call(${1:function_name});
snippet meth pause()	TimelineLite: Pauses the instance, optionally jumping to a specific time.
	pause(${1});
snippet meth resume()	TimelineLite: Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first.
	resume(${1});
snippet meth restart()	TimelineLite: Restarts and begins playing forward from the beginning.
	restart(${1});
snippet meth reverse()	TimelineLite: Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween's ease.
	reverse(${1});
snippet meth play()	TimelineLite: Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is).
	play(${1});
snippet meth seek()	TimelineLite: [override] Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed.
	seek(${1:2});
snippet meth timescale()	TimelineLite: Factor that's used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.
	timeScale(${1:0.5});
snippet meth add()	TimelineLite: [override] Adds a tween, timeline, callback, or label (or an array of them) to the timeline.
	add(${1:what}, ${2:where});
snippet meth addLabel()	TimelineLite: Adds a label to the timeline, making it easy to mark important positions/times.
	addLabel(${1:label}, ${2:position});
snippet onc
	onComplete: function() {${1}}
snippet ons
	onStart: function() {${1}}
#
#
#
############
# Backbone #
############
# backbone collection definition
snippet bbc
	Backbone.Collection.extend({${1}});
# backbone model definition
snippet bbm
	Backbone.Model.extend({
		initialize: function() {${1}}
	});
# backbone router definition
snippet bbr
	Backbone.Router.extend({
		routes: {${1}}
	});
# backbone view definition
snippet bbv
	Backbone.View.extend({
		initialize: function() {${3}},
		el: ${1:selector},
		model: ${2:model},
		template: ${3:template},
		events: {},
		render: function(){}
	});
#
#
#
##############
# Underscore #
##############
# template
snippet <
	<%= ${1} %>
#
#
#
#########
# Mocha #
#########
# shortcuts
snippet test
	describe('${1:Description}', function() {
		it('${2:should}', function() {
			${3:// assertion}
		});
	});
snippet desc
	describe('${1:Description}', function() {
		${2:/* code in here */}
	});
snippet it
	it('${1:should}', function() {
		${2:/* code in here */}
	});
# describe
snippet mo describe
	describe('${1:Description}', function() {
		${2:/* code in here */}
	});
# before
snippet mo before
	before(function() {
		${1:/* code in here */}
	});
# after
snippet mo after
	after(function() {
		${1:/* code in here */}
	});
# beforeEach
snippet mo beforeEach
	beforeEach(function() {
		${1:/* code in here */}
	});
# afterEach
snippet mo afterEach
	afterEach(function() {
		${1:/* code in here */}
	});
# it
snippet mo it
	it('${1:should}', function() {
		${2:/* code in here */}
	});
# it pending
snippet mo it pending
	it('${1:should}');
#
#
#
########
# Chai #
########
# shortcuts
snippet ex expect
	expect(${1:false}).${2:to...};
# to be...
snippet to to be ok
	to.be.ok;
snippet to to not be ok
	to.not.be.ok;
snippet to to eql... (deep)
	to.eql(${2:''});
snippet to to equal... (strict)
	to.equal(${2:''});
snippet to to be instanceof..
	to.be.instanceof(${2:false});
snippet to to have property...
	to.have.property(${2:'property'});
snippet to to be a...
	to.be.a('${2:}');
# fast .a(type) versions
snippet to to be a string
	to.be.a('string');
snippet to to be an array
	to.be.a('array');
snippet to to be an object
	to.be.a('object');
snippet to to be null
	to.be.a('null');
snippet to to be undefined
	to.be.a('undefined');
