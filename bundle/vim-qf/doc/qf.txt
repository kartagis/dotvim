*qf.txt*	A plugin to make working with the quickfix list/window smoother.


			VIM-QF DOCUMENTATION by Romain Lafourcade


Help on using vim-qf                                                *qf* *vim-qf*

    1. Introduction ............................... |qf-intro|
    2. Installation ............................... |qf-installation|
    3. Configuration .............................. |qf-configuration|
    4. Usage ...................................... |qf-usage|
    5. Acknowledgements ........................... |qf-acknowledgements|
    6. TODO ....................................... |qf-todo|
    7. DONE ....................................... |qf-done|

==============================================================================
 1. INTRODUCTION                                                     *qf-intro*

vim-qf – short for "vim-quickfix" – is a small collection of settings,
commands and mappings put together to make working with the quickfix
list/window smoother.

Here are the features provided by this plugin:

    - disable soft-wrapping in the quickfix window,
    - disable relative numbers in the quickfix window,
    - quickfix buffers are hidden from |:ls| and buffer navigation,
    - optional Ack.vim-inspired mappings,
    - optional mappings for |:cnext|, |:cprevious|, |:lnext|, |:lprevious|
      that wrap around the beginning an end of the list,
    - optional mapping for jumping to and from the location/quickfix window,
    - filter/restore the list,
    - perform commands on each line in the list,
    - perform commands on each file in the list,
    - open the location/quickfix window automatically after |:make|, |:grep|,
      |:lvimgrep| and friends if there are valid locations/errors
    - quit Vim if the last window is a location/quickfix window
    - jump to next group of entries belonging to same file ("file grouping")

==============================================================================
 2. INSTALLATION                                              *qf-installation*

Use your favorite plugin manager or dump the files below in their
standard location:

on Unix-like systems... >

    ~/.vim/after/ftplugin/qf.vim
    ~/.vim/autoload/qf.vim
    ~/.vim/doc/qf.txt
    ~/.vim/plugin/qf.vim
<
on Windows... >

    %userprofile%\vimfiles\after\ftplugin\qf.vim
    %userprofile%\vimfiles\autoload\qf.vim
    %userprofile%\vimfiles\doc\qf.txt
    %userprofile%\vimfiles\plugin\qf.vim
<
Don't forget to execute the following command to make the documentation
globally available:

on Unix-like systems... >

    :helptags ~/.vim/doc
<
on Windows... >

    :helptags %userprofile%\vimfiles\doc
<
==============================================================================
 3. CONFIGURATION                                            *qf-configuration*

Available global mappings:

    <Plug>QfCprevious ............................. |QfCprevious|
    <Plug>QfCnext ................................. |QfCnext|
    <Plug>QfLprevious ............................. |QfLprevious|
    <Plug>QfLnext ................................. |QfLnext|
    <Plug>QfSwitch ................................ |QfSwitch|

Available local mappings:

    { ............................................. |QfPreviousFile|
    } ............................................. |QfNextFile|

Available options:

    qf_mapping_ack_style .......................... |qf_mapping_ack_style|
    qf_statusline ................................. |qf_statusline|

------------------------------------------------------------------------------
                                                                  *QfCprevious*
                                                                      *QfCnext*
Scope: global                                                                 ~
Default: none                                                                ~

Go up and down the quickfix list and wrap around.

Example: >

    nnoremap <Home> <Plug>QfCprevious
    nnoremap <End>  <Plug>QfCnext
<
------------------------------------------------------------------------------
                                                                  *QfLprevious*
                                                                      *QfLnext*
Scope: global                                                                 ~
Default: none                                                                ~

Go up and down the location list and wrap around.

Example: >

    nnoremap <C-Home> <Plug>QfLprevious
    nnoremap <C-End>  <Plug>QfLnext
<
------------------------------------------------------------------------------
                                                                     *QfSwitch*
Scope: global                                                                 ~
Default: none                                                                ~

Jump to and from the location/quickfix window.

Example: >

    nnoremap ç <Plug>QfSwitch
<
------------------------------------------------------------------------------
                                                               *QfPreviousFile*
                                                                   *QfNextFile*
Scope: local                                                                 ~
Default: { and }                                                             ~

Jump to the next group of lines corresponding to a file.

------------------------------------------------------------------------------
                                                        *'qf_mapping_ack_style'*
Value: numeric                                                               ~
Default: 0                                                                   ~

Ack.vim-inspired mappings available only in the quickfix window:

    s - open entry in a new horizontal window
    v - open entry in a new vertical window.
    t - open entry in a new tab.
    o - open entry and come back
    O - open entry and close the location/quickfix window.

Add the line below to your vimrc to enable that feature: >

    let g:qf_mapping_ack_style = 1
<
------------------------------------------------------------------------------
                                                               *'qf_statusline'*
Value: dictionary                                                            ~
Default: {}                                                                  ~

It is possible to define what comes before and after the default information
displayed in the |'statusline'|.

Example: >

    let g:qf_statusline = {}
    let g:qf_statusline.before = '%<\ '
    let g:qf_statusline.after = '\ %f%=%l\/%-6L\ \ \ \ \ '
<
==============================================================================
 4. USAGE                                                            *qf-usage*

The following commands are available when the location/quickfix window
is focused:

*:Keep*

    Removes all entries that don't contain the given argument, either in the
    filename or in the description. Note: the argument is not a regular
    expression pattern.

    Example: >

        :Keep model
>
*:Reject*

    Removes all entries that contain the given argument in the filename or
    in the description. Note: the argument is not a regular expression
    pattern.

    Example: >

        :Reject build
>
*:Restore*

    Restores the list to its original state.

*:Doline*

    Executes an Ex command on every line in the current list.
    Aliased to the built-in `:cdo` and `:ldo` when applicable.

    Example: >

        :Doline s/^/--
<
*:Dofile*

    Executes an Ex command on every file in the current list.
    Aliased to the built-in `:cfdo` and `:lfdo` when applicable.

    Example: >

        :Dofile norm @q
<
NOTE: In most cases it is possible to only type a few characters to
disembiguate commands. Assuming you don't already have custom commands with
clashing names, you can shorten the commands above to:

    |:Keep| ....................................... :K
    |:Reject| ..................................... :Rej
    |:Restore| .................................... :Res
    |:Doline| ..................................... :Dol
    |:Dofile| ..................................... :Dof

==============================================================================
 5. ACKNOWLEGEMENTS                                       *qf-acknowledgements*

The "Ack.vim-inspired mappings" are adapted from Ack.vim:

    - https://github.com/mileszs/ack.vim

|:Doline| and |:Dofile| are inspired by these online resources:

    - http://vimcasts.org/episodes/project-wide-find-and-replace/
    - https://github.com/nelstrom/vim-qargs
    - https://github.com/henrik/vim-qargs
    - http://stackoverflow.com/a/4793316/546861
    - http://stackoverflow.com/a/5686810/546861

|:Keep| and |:Reject| are adapted from the answers in this thread:

    - http://stackoverflow.com/q/15406138/546861

All the templates used to turn this multifarious collection of snippets into
a proper plugin come from Barry Arthur's Area 41 plugin:

    - https://github.com/dahu/Area-41

==============================================================================
 6. TODO                                                              *qf-todo*

    - Export more options?
    - Add a gifcast to the README?

==============================================================================
 7. DONE                                                              *qf-done*

    - Use <Plug> mappings.
    - Add proper attribution for a few features.
    - Write a proper help file.
    - Ask #vim's opinion.

 vim:tw=78:ts=8:ft=help:norl:
